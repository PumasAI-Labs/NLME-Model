{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Pumas-AI NLME Modeling Workshop","text":"<p>This workshop is an introduction to non-linear mixed effects (NLME) modeling in Pumas.</p> <p>It covers how to:</p> <ul> <li>parse data into a <code>Population</code></li> <li>define models with <code>@model</code> by specifying:<ul> <li>parameters with <code>@param</code></li> <li>random effects with <code>@random</code></li> <li>individual coefficients and statistical transformations with <code>@pre</code></li> <li>model dynamics with <code>@dynamics</code></li> <li>error models with <code>@derived</code></li> </ul> </li> <li>perform an estimation with <code>fit</code> and accounting for:<ul> <li>different estimation methods such as <code>FOCE</code> and <code>LaplaceI</code></li> <li>fixed parameters values</li> </ul> </li> <li>calculate confidence intervals with <code>infer</code> by using:<ul> <li>variance-covariance matrix</li> <li>bootstrap</li> <li>sampling importance resampling (SIR)</li> </ul> </li> </ul> <p>The following Julia files are provided:</p> <ol> <li><code>01-population.jl</code>: covers how to define <code>Population</code>s from <code>DataFrames</code></li> <li><code>02-model.jl</code>: walks through the <code>@model</code> syntax and the model blocks</li> <li><code>03-fit.jl</code>: an overview of different usages of the <code>fit</code> function</li> <li><code>04-infer.jl</code>: an overview of different usages of the <code>infer</code> function</li> </ol> <p>Prerequisites</p> <p>We recommend users being familiar with Julia syntax, especially variables and types.</p> <p>The formal requirements are the Julia Syntax Workshop and its pre-requisites.</p>"},{"location":"#schedule","title":"Schedule","text":"Time (HH:MM) Activity Description 00:00 Setup Download files required for the workshop 00:05 Parsing Data Showcase <code>01-population.jl</code> 00:20 Model Specification Showcase <code>02-model.jl</code> 00:35 Model Fitting Showcase <code>03-fit.jl</code> 00:45 Model Confidence Intervals Showcase <code>04-infer.jl</code> 00:55 Closing Remarks See if there are any questions and feedback"},{"location":"#get-in-touch","title":"Get in touch","text":"<p>If you have any suggestions or want to get in touch with our education team, please send an email to training@pumas.ai.</p>"},{"location":"#authors","title":"Authors","text":"<ul> <li>Jose Storopoli - jose@pumas.ai</li> </ul>"},{"location":"#license","title":"License","text":"<p>This content is licensed under Creative Commons Attribution-ShareAlike 4.0 International.</p> <p></p>"},{"location":"code_of_conduct/","title":"Code of Conduct for Pumas-AI NLME Modeling Workshop","text":"<p>At Pumas-AI we are committed to creating a friendly and respectful place for learning, teaching and contributing. All participants in our events and communications are expected to show respect and courtesy to others. To make clear what is expected, everyone participating in Pumas-AI activities is required to conform to the Code of Conduct.</p> <p>Pumas-AI is dedicated to providing a welcoming and supportive environment for all people, regardless of background or identity. As such, we do not tolerate behaviour that is disrespectful to our instructors or learners or that excludes, intimidates, or causes discomfort to others. We do not tolerate discrimination or harassment based on characteristics that include, but are not limited to, gender identity and expression, sexual orientation, disability, physical appearance, body size, citizenship, nationality, ethnic or social origin, pregnancy, familial status, veteran status, genetic information, religion or belief (or lack thereof), membership of a national minority, property, age, education, socio-economic status, technical choices, and experience level.</p>"},{"location":"code_of_conduct/#expected-behaviour","title":"Expected Behaviour","text":"<p>All participants in our events and communications are expected to show respect and courtesy to others. All interactions should be professional regardless of platform: either online or in-person. In order to foster a positive and professional learning environment we encourage the following kinds of behaviours in all Pumas-AI events and platforms:</p> <ul> <li>Use welcoming and inclusive language</li> <li>Be respectful of different viewpoints and experiences</li> <li>Gracefully accept constructive criticism</li> <li>Focus on what is best for the community</li> <li>Show courtesy and respect towards other community members</li> </ul>"},{"location":"code_of_conduct/#unacceptable-behaviour","title":"Unacceptable Behaviour","text":"<p>Examples of unacceptable behaviour by participants at any Pumas-AI event/platform include:</p> <ul> <li>written or verbal comments which have the effect of excluding people on the basis of membership of any specific group</li> <li>causing someone to fear for their safety, such as through stalking, following, or intimidation</li> <li>violent threats or language directed against another person</li> <li>the display of sexual or violent images</li> <li>unwelcome sexual attention</li> <li>nonconsensual or unwelcome physical contact</li> <li>sustained disruption of talks, events or communications</li> <li>insults or put downs</li> <li>sexist, racist, homophobic, transphobic, ableist, or exclusionary jokes</li> <li>excessive swearing</li> <li>incitement to violence, suicide, or self-harm</li> <li>continuing to initiate interaction (including photography or recording) with someone after being asked to stop</li> <li>publication of private communication without consent</li> </ul>"},{"location":"code_of_conduct/#consequences-of-unacceptable-behaviour","title":"Consequences of Unacceptable Behaviour","text":"<p>Participants who are asked to stop any inappropriate behaviour are expected to comply immediately. This applies to any Pumas-AI events and platforms, either online or in-person. If a participant engages in behaviour that violates this code of conduct, the organisers may warn the offender, ask them to leave the event or platform (without refund, if applicable), or engage with Pumas-AI representatives to investigate the Code of Conduct violation and impose appropriate sanctions.</p>"},{"location":"code_of_conduct/#get-in-touch","title":"Get in touch","text":"<p>If you have any suggestions or want to get in touch with our education team, please send an email to training@pumas.ai.</p>"},{"location":"code_of_conduct/#license","title":"License","text":"<p>This content is licensed under Creative Commons Attribution-ShareAlike 4.0 Internacional.</p> <p></p>"},{"location":"contribute/","title":"How to Contribute","text":"<p>If you want to contribute to this workshop, please open a pull request at <code>PumasAI-Labs/NLME-Model</code>.</p> <p>By submitting a pull request, you are in accordance that your contribution will be licensed under Creative Commons Attribution-ShareAlike 4.0 International.</p> <p>Once your pull request is approved and merged, you'll be acknowledged as one of the authors in the workshop site and GitHub repository.</p>"},{"location":"instructors/","title":"Instructor's Notes for Pumas-AI NLME Modeling Workshop","text":"<p>Start with the <code>01-population.jl</code> file. Show users how to load <code>Pumas</code> with the <code>using</code> statement. Load an NMTRAN-formatted <code>DataFrame</code>, and show a preview of the data by going over the column names. Explain the difference between <code>evid</code>s and why some rows have <code>missing</code> values (measurement rows, <code>evid == 1</code>). We suggest using the <code>iv_sd_3</code> dataset from <code>PharmaDatasets.jl</code>.</p> <p>Once users are familiar with the NMTRAN format dataset, introduce the <code>read_pumas</code> function to parse NMTRAN-formatted <code>DataFrame</code>s into a <code>Population</code>. Go over the <code>read_pumas</code>' docstring (<code>?read_pumas</code>) with extra attention on the keyword arguments. The keyword arguments that you should focus on are:</p> <ul> <li><code>observations</code></li> <li><code>covariates</code></li> <li><code>id</code></li> <li><code>time</code></li> <li><code>evid</code></li> <li><code>amt</code></li> <li><code>cmt</code></li> </ul> <p>If users need to parse complex dosing datasets, e.g. datasets with <code>II</code>, <code>ADDL</code>, <code>SS</code>, <code>RATE</code>, or <code>ROUTE</code>; explain the following <code>read_pumas</code>'s keyword arguments:</p> <ul> <li><code>ii</code></li> <li><code>addl</code></li> <li><code>ss</code></li> <li><code>rate</code></li> <li><code>route</code></li> </ul> <p>Additionally, if users need to deal with datasets that have a missing observation column, i.e. <code>MDV</code> in NMTRAN-formatted datasets; explain the <code>mdv</code> <code>read_pumas</code>'s keyword arguments.</p> <p>Proceed by parsing the NMTRAN-formatted dataset into a <code>Population</code>. Explain that <code>Population</code> is simply a collection (<code>Vector</code>) of <code>Subject</code>s by indexing it and showing the <code>Subject</code> result. Like any Julia <code>Vector</code> you can also slice a <code>Population</code>. Show how to slice a <code>Population</code> into a subset of the original <code>Population</code>.</p> <p>Showcase how to do the opposite, convert a <code>Population</code> or a <code>Subject</code> into an NMTRAN-formatted <code>DataFrame</code> with the <code>DataFrame</code> constructor, e.g. <code>DataFrame(pop)</code>. Additionally, demonstrate that you can use the <code>DataFrame</code> constructor into any of the previous slices and indexes of the original <code>Population.</code></p> <p>Move to the <code>02-model.jl</code>. Start by explaining the <code>@model</code> macro: it allows you to specify model blocks inside it. With respect to the model blocks, begin with the <code>@metadata</code> block and stress the importance of specifying model description and time units. Explain the <code>@param</code> block with a focus on the different domains, e.g. <code>RealDomain</code> and <code>PDiagDomain</code>. Don't forget to teach users how to type LaTeX symbols in Julia/Pumas. Explain the <code>@random</code> block with a focus on the probabilistic assignment <code>~</code>. Explain the <code>@covariates</code> block and make sure that users understand that the covariates need to be also included in the <code>read_pumas</code> function when parsing the data into a <code>Population</code>. Explain the <code>@pre</code> block making analogies to NONMEM's <code>$PK</code> model block. Explain the <code>@dynamics</code> block by showing examples of both analytical solutions and systems of ordinary differential equations, i.e. <code>Central1</code> versus <code>Central' = -(CL/VC) * Central</code>. Explain the <code>@derived</code> block with a focus on deterministic <code>=</code> and probabilistic <code>~</code> assignments, also for the DVs in this block remark users that they should be included in the <code>read_pumas</code> function as values to the <code>observations</code> keyword argument.</p> <p>Proceed to the <code>03-fit.jl</code>. Begin by showing how to define a initial parameter values <code>NamedTuple</code>. Then, highlight that the <code>fit</code> function takes four positional arguments:</p> <ol> <li><code>model</code>: which model to fit</li> <li><code>population</code>: which population to fit</li> <li><code>initial_parameters</code>: a <code>NamedTuple</code> of initial parameter estimates</li> <li><code>estimation_method</code>: which estimation method to use; for maximum likelihood: <code>FOCE</code>, <code>NaivePooled</code>, and <code>LaplaceI</code> are the most common</li> </ol> <p>Perform a fit using <code>FOCE()</code>. Perform a fit using <code>NaivePooled</code>. Don't forget to explain the <code>omegas</code> keyword argument when fitting with <code>NaivePooled</code>. Perform a fit using <code>LaplaceI</code>. Perform a fit with fixed parameter values using the <code>constantcoef</code> keyword argument. Show how to get the parameter estimates using <code>coef</code> for a <code>NamedTuple</code>, and <code>coeftable</code> for a <code>DataFrame</code>. Finally, show how to get a <code>DataFrame</code> of the individual subject-specific parameters with <code>icoef</code>.</p> <p>Open <code>04-infer.jl</code>. Showcase how to calculate confidence intervals (CIs) using the <code>infer</code> function. The default case will generate CIs using the variance-covariance matrix calculated using the sandwich estimator. You can pass an optional second positional argument for alternate ways to generate CIs. If you pass <code>Pumas.Bootstrap()</code> as the second positional argument you will generate CIs using bootstrap, which by default fits the model to 200 bootstrapped samples. If you pass <code>Pumas.SIR()</code> as the second positional argument you will generate CIs using the sampling importance resampling (SIR) method. Warn the user that <code>Pumas.SIR()</code> does not have default values, hence it is necessary to always specify the keyword arguments <code>samples</code> and <code>resamples</code>.</p> <p>Finalize the workshop by asking for questions and getting feedback from the users.</p>"},{"location":"instructors/#get-in-touch","title":"Get in touch","text":"<p>If you have any suggestions or want to get in touch with our education team, please send an email to training@pumas.ai.</p>"},{"location":"instructors/#license","title":"License","text":"<p>This content is licensed under Creative Commons Attribution-ShareAlike 4.0 International.</p> <p></p>"},{"location":"reference/","title":"Reference Sheets for Pumas-AI NLME Modeling Workshop","text":""},{"location":"reference/#key-points","title":"Key Points","text":"<ul> <li>You can parse a NM-TRAN-formatted <code>DataFrame</code> into a <code>Population</code> with <code>read_pumas</code></li> <li>A <code>Population</code> is just a collection (<code>Vector</code>) of <code>Subject</code>s</li> <li>You can slice and index <code>Population</code>s to get another <code>Population</code> subset or a single <code>Subject</code></li> <li>You can reconstruct a NM-TRAN-formatted <code>DataFrame</code> from a <code>Population</code>/<code>Subject</code> with the <code>DataFrame</code> constructor</li> <li>To define a model in Pumas, you use the <code>@model</code> macro along with the model blocks:<ul> <li><code>@metadata</code> for model metadata such as description and time units</li> <li><code>@param</code> for the population parameters (i.e. typical values or fixed effects)</li> <li><code>@random</code> for the subject-specific parameters (\u03b7 or random effects)</li> <li><code>@covariates</code> for subject covariates</li> <li><code>@pre</code> for pre computations such as individual coefficients or any other statistical transformation</li> <li><code>@dynamics</code> for the model dynamics, either as an analytical solution or a system of ordinary differential equations</li> <li><code>@derived</code> for derived variables and error model</li> </ul> </li> <li>In the <code>@model</code> you can have two types of assignments:<ul> <li>Deterministic assignments with <code>=</code></li> <li>Probabilistic assignments with <code>~</code></li> </ul> </li> <li>The <code>fit</code> function is very flexible, it has 4 positional arguments:<ol> <li><code>model</code>: which model to fit</li> <li><code>population</code>: which population to fit</li> <li><code>initial_parameters</code>: a <code>NamedTuple</code> of initial parameter estimates</li> <li><code>estimation_method</code>: which estimation method to use; for maximum likelihood: <code>FOCE</code>, <code>NaivePooled</code>, and <code>LaplaceI</code> are the most common</li> </ol> </li> <li>Additionally, the <code>fit</code> function has the following most used keyword arguments:<ul> <li><code>constantcoef</code>: if you want to set any parameter value to a constant value, similar to <code>FIX</code> in NONMEM</li> <li><code>omegas</code>: a tuple with the value of the \"omegas\" in the <code>@param</code> block, needed for <code>NaivePooled</code> estimation method</li> </ul> </li> <li>All results from the <code>fit</code> function can be converted to a:<ul> <li><code>NamedTuple</code> with <code>coef</code></li> <li><code>DataFrame</code> with <code>coeftable</code></li> </ul> </li> <li>You can extract individual coefficients with the <code>icoef</code> function, if you want in a <code>DataFrame</code> format use the <code>DataFrame</code> constructor on the result</li> <li>The <code>infer</code> function can be used to generate confidence intervals using:<ul> <li>Variance-covariance matrix (default)</li> <li>Bootstrap with a second argument <code>Pumas.Bootstrap()</code></li> <li>Sampling importance resampling (SIR) with a second argument <code>Pumas.SIR()</code></li> </ul> </li> <li>All results from the <code>infer</code> function can be converted to a <code>DataFrame</code> with <code>coeftable</code></li> </ul>"},{"location":"reference/#summary-of-basic-commands","title":"Summary of Basic Commands","text":"Action Command Observations Parse data into a <code>Population</code> <code>read_pumas</code> NM-TRAN-formatted <code>DataFrame</code>s Index or slice a <code>Population</code> <code>pop[1]</code> or <code>pop[1:10]</code> Reconstruct data from a <code>Population</code> <code>DataFrame(pop)</code> NM-TRAN-formatted <code>DataFrame</code>s Reconstruct data from a index or slice <code>Population</code> <code>DataFrame(pop[1])</code> or <code>DataFrame(pop[1:10])</code> NM-TRAN-formatted <code>DataFrame</code>s Define a model <code>@model</code> Define model metadata <code>@metadata</code> Define the population parameters of a model <code>@param</code> Define the subject-specific parameters of a model <code>@random</code> Define the subject covariates <code>@covariates</code> Define individual coefficients, precomputations or any statistical transformation <code>@pre</code> Define model dynamics <code>@dynamics</code> Define model derived variables and error model <code>@derived</code> Fit a model using <code>FOCE()</code> <code>fit(model, population, initial_parameters, FOCE())</code> <code>initial_parameters</code> is a <code>NamedTuple</code> of parameter name and values Fit a model using <code>NaivePooled</code> <code>fit(model, population, initial_parameters, NaivePooled(); omegas=(:\u03a9,))</code> <code>omegas</code> is a keyword argument that should be a tuple specifying the variable name where the \u03a9s are defined in the model Fit a model using <code>FOCE()</code> with fixed parameter values <code>fit(model, population, initial_parameters, FOCE(); constantcoef=(; parameter=value))</code> <code>constantcoef</code> is a keyword argument that should be a <code>NamedTuple</code> specifying the parameter name along with the value to be fixed Get model fit coefficients as a <code>NamedTuple</code> <code>coef(fit_result)</code> Get model fit coefficients as a <code>DataFrame</code> <code>coeftable(fit_result)</code> Get model individual parameters as a <code>DataFrame</code> <code>DataFrame(icoef(fit_result))</code> Calculate confidence intervals using the Variance-covariance matrix <code>infer(fit_result)</code> Uses the sandwich estimator by default Calculate confidence intervals using bootstrap <code>infer(fit_result, Pumas.Bootstrap())</code> Perform 200 samples by default Calculate confidence intervals using sampling importance resampling (SIR) <code>infer(fit_result, SIR())</code> User needs to specify the number of samples and resamples, i.e. there aren't default values Get model confidence intervals as a <code>DataFrame</code> <code>coeftable(infer_result)</code>"},{"location":"reference/#glossary","title":"Glossary","text":"NM-TRAN <p>Official NONMEM dataset format. Check Pumas documentation on Data Representation for more information.</p> <code>DataFrame</code> <p>A tabular data format from the package <code>DataFrames.jl</code>. It is the standard tabular data format in Julia and is present in the Pumas app.</p> <code>Population</code> <p>Pumas' representation of a collection of <code>Subject</code>s. Generally parsed from NM-TRAN-formatted <code>DataFrame</code>s.</p> <code>Vector</code> <p>Contiguous data structure that allows ordering, indexing, looping, slicing, and shape-destructing operations, i.e. grow or shrink. Most used to group elements into a collection.</p> <code>Subject</code> <p>Pumas' representation of a subject that has covariates, time, events, observations, and any other relevant information.</p> <code>@model</code> <p>how users define models in Pumas, it allows for several other blocks inside. The syntax is similar to NONMEM model specification, but with higher flexibility and expressiveness.</p> <code>@metadata</code> <p><code>@model</code> block with additional details such as model description and model time units.</p> <code>@param</code> <p><code>@model</code> block for the population parameters. Analogous to NONMEM's <code>$THETA</code>, <code>$OMEGA</code>, and <code>$SIGMA</code>.</p> <code>@random</code> <p><code>@model</code> block for the subject-specific parameters, also known as \u03b7 or random effects.</p> <code>@covariates</code> <p><code>@model</code> block for subject covariates.</p> <code>@pre</code> <p><code>@model</code> block for pre computations such as individual coefficients or any other statistical transformation. Analogous to NONMEM's <code>$PK</code>.</p> <code>@dynamics</code> <code>@model</code> block for the model dynamics, either as an analytical solution or a system of ordinary differential equations. Analogous to NONMEM's <code>$DES</code>. <code>@derived</code> <p><code>@model</code> block for derived variables and error model. Analogous to NONMEM's <code>$ERROR</code>.</p> Deterministic assignments <p>assignments that will always return the same value. The standard assignment operator in programming languages, e.g. <code>x=1</code> or <code>y=\"hello\"</code>.</p> Probabilistic assignments <p>An assignment operator that instead of returning the same value, samples a random value under a distribution. For example, <code>x ~ Normal(0, 1)</code> will generate a new value sampled from a normal distribution with mean 0 and standard deviation 1 every time it is executed.</p> Model <p>Mathematical representation of the underlying process regarding a certain phenomena.</p> Fit <p>Condition the data into the model and infer the model's parameter values by an estimation method.</p> FOCE <p>Estimation method originally from NONMEM, it means First Order Conditional Effects. Please refer to the Pumas documentation for more details.</p> Naive Pooled <p>Estimation method that ignores subject-specific parameters relying only on population parameters. Please refer to the Pumas documentation for more details.</p> Laplace <p>Estimation method that uses Laplacian approximation under the hood. Please refer to the Pumas documentation for more details.</p> \u03a9 <p>The covariance matrix of the subject-specific parameters. Commonly referred to as the \"Omega\" matrix.</p> \u03b7 <p>The individual subject-specific parameters. Commonly referred to as \"etas\". Generally a vector for each subject, e.g. <code>\u03b7 = [\u03b7\u2081, \u03b7\u2082]</code>.</p> <code>icoef</code> <p>Individual coefficients, also known as subject-specific parameters.</p> Confidence intervals <p>Commonly used procedure to measure uncertainty on parameter estimates in maximum likelihood estimation methods.</p> Variance-covariance matrix <p>A symmetric matrix with <code>NxN</code> dimensions where <code>N</code> is the number of parameters, the diagonals are the parameter variances, and the symmetric off-diagonal elements are the covariance between the parameter in the <code>i</code>th row and the parameter in the <code>j</code> row.</p> Sandwich estimator <p>Commonly used procedure to generate a Variance-covariance matrix from pharmacometrics model fit.</p> Bootstrap <p>Alternative way to calculate confidence intervals by fitting the model to <code>N</code> bootstrapped samples, that are generated by sampling with replacement the original sample a new sample with the same size as the original.</p> Sampling importance resampling (SIR) <p>Alternative way to calculate confidence intervals that rely on the importance sampling procedure.</p>"},{"location":"reference/#get-in-touch","title":"Get in touch","text":"<p>If you have any suggestions or want to get in touch with our education team, please send an email to training@pumas.ai.</p>"},{"location":"reference/#license","title":"License","text":"<p>This content is licensed under Creative Commons Attribution-ShareAlike 4.0 International.</p> <p></p>"},{"location":"waiver/","title":"Waiver of Liability for Pumas-AI NLME Modeling Workshop","text":"<p>By using the content provided by Pumas-AI, you agree to the following:</p> <ol> <li>You acknowledge that Pumas-AI has provided you with access to certain content (the \"Content\"),    including but not limited to software, documentation, images, videos, and other materials.</li> <li>You understand and agree that the Content is provided \"as is,\" without warranty of any kind,    either express or implied, including but not limited to the implied warranties of merchantability    and fitness for a particular purpose.</li> <li>You acknowledge that Pumas-AI is not responsible for how you use the Content,    and that Pumas-AI shall not be liable for any damages arising from your use of the Content,    including but not limited to direct, indirect, incidental, special, consequential, or punitive damages,    whether in an action of contract, negligence, or other tortious action,    even if Pumas-AI has been advised of the possibility of such damages.</li> <li>You agree to indemnify, defend, and hold harmless Pumas-AI, its officers, directors, employees, agents,    and affiliates from and against any and all claims, damages, losses, liabilities,    and expenses (including reasonable attorneys' fees) arising from your use of the Content.</li> <li>You acknowledge that this Waiver of Liability is a legally binding agreement between you and Pumas-AI,    and that it governs your use of the Content.    If you do not agree to the terms of this Waiver of Liability, you must immediately cease using the Content.</li> </ol>"},{"location":"waiver/#get-in-touch","title":"Get in touch","text":"<p>If you have any suggestions or want to get in touch with our education team, please send an email to training@pumas.ai.</p>"},{"location":"waiver/#license","title":"License","text":"<p>This content is licensed under Creative Commons Attribution-ShareAlike 4.0 International.</p> <p></p>"}]}